#  Resonant Amp tube amplifier simulation
#  Copyright (C) 2020  Garrin McGoldrick
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
Functionality to compile faust code into a standalone header.

This is a really ad-hoc way of including faust into a JUCE project, and in 
particular will likely not work with different versions of faust. This is build
for faust 2.14.4.

This script assumes a particular structure to the code generated by faust, but
this is clearly not a stable API.
"""

import os
import re
import subprocess
import warnings
from pathlib import Path
from typing import Mapping


def compile_faust_dsp(name: str, path: Path, path_dsp: Path) -> Path:
    """Compile faust dsp code to a header file."""
    os.makedirs(str(path), exist_ok=True)
    path_h = Path(path) / f"{name}.h"
    subprocess.check_call(
        ["faust.exe", str(path_dsp), "-o", str(path_h), "-cn", name, "-scn", "Base"]
    )
    return path_h


def make_standalone(name: str, code: str, defaults: Mapping[str, float]) -> str:
    """
    Make a faust source file standalone by removing faust dependncy. Adds 
    setters for user input parameters.
    """
    lines = list()
    parameters = list()
    in_meta = False
    in_ui = False
    in_reset = False

    used_defaults = set()

    # find the names of user input parameters
    re_par = re.compile(r'\("([^"]+)", &(fEntry[0-9]+), ')
    re_par_name = re.compile(r'fEntry[0-9]+')

    for line in code.split("\n"):
        line = line.rstrip()
        # remove the inheritance from Base which is not used
        if line == f"class {name} : public Base {{":
            line = f"class {name} {{"

        # identify when in the metadata function and don't use that code in the
        # output since it depends on Base and is no use for plugins
        if line == "\tvoid metadata(Meta* m) {":
            in_meta = True
            continue
        if in_meta and line == "\t}":
            in_meta = False
            continue
        if in_meta:
            continue

        # identift when in the UI
        if line == "\tvirtual void buildUserInterface(UI* ui_interface) {":
            in_ui = True
            continue
        # output the setters after where the UI code would've been
        if in_ui and line == "\t}":
            in_ui = False

            for par_name, par_var in parameters:
                default_value = defaults.get(par_name, None)
                if default_value is not None:
                    used_defaults.add(par_name)
                    lines.append(
                        f"\tvoid set_{par_name}(FAUSTFLOAT value) {{ {par_var} = value + {default_value:.6e}f; }}"
                    )
                else:
                    lines.append(
                        f"\tvoid set_{par_name}(FAUSTFLOAT value) {{ {par_var} = value; }}"
                    )

            lines.append("\tvoid zero_all() {")
            for par_name, par_var in parameters:
                lines.append(f"\t\tset_{par_name}(0.0f);")
            lines.append("\t}")

            continue
        # don't use the UI code, but get the parameter nmes
        if in_ui:
            match = re_par.search(line)
            if match:
                parameters.append((match.group(1), match.group(2)))
            continue
    
        # identify when in the reset parameter block
        if line == "\tvirtual void instanceResetUserInterface() {":
            in_reset = True
        if in_reset and line == "\t}":
            # after setting all the parameters to 0, run the setters so that
            # their default values get applied
            lines.append("\t\tzero_all();")
            in_reset = False

        lines.append(line)
    
    unused_defaults = set(defaults.keys()) - used_defaults
    if unused_defaults:
        warnings.warn("unused defaults: {}".format(", ".join(unused_defaults)))

    parameters = [n for n, _ in parameters]

    return "\n".join(lines), parameters


def build_header(
    path_build: str,
    path_dsp: str,
    name: str,
    defaults: Mapping[str, float],
) -> str:
    path_build = Path(path_build)
    path_dsp = Path(path_dsp) / f"{name}.dsp"

    path_h = compile_faust_dsp(name=name, path=path_build, path_dsp=path_dsp)

    with path_h.open("r") as fio:
        code = fio.read()
    code, _ = make_standalone(name=name, code=code, defaults=defaults)

    return code
